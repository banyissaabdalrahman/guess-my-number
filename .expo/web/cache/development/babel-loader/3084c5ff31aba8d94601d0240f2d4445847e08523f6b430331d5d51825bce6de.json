{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Title from \"../components/ui/Title\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Card from \"../components/ui/Card\";\nimport ButtonsStyles from \"../constants/ButtonsStyles\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport GuessLogItem from \"../components/game/GuessLogItem\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction generateRandomBetween(min, max, exclude) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\nvar minBoundary = 1;\nvar maxBoundary = 100;\nfunction GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n    onGameOver = _ref.onGameOver,\n    onRoundsCount = _ref.onRoundsCount;\n  var initalGuess = generateRandomBetween(1, 100, userNumber);\n  var _useState = useState(initalGuess),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentGuess = _useState2[0],\n    setCurrentGuess = _useState2[1];\n  var _useState3 = useState([initalGuess]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    logRounds = _useState4[0],\n    setLogRounds = _useState4[1];\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n  useEffect(function () {\n    minBoundary = 1;\n    maxBoundary = 100;\n  }, []);\n  function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < userNumber || direction === \"greater\" && currentGuess > userNumber) {\n      Alert.alert(`Don't lie!`, `You know that this is wrong`, [{\n        text: \"SORRY!\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n    if (direction === \"lower\") {\n      maxBoundary = currentGuess;\n      onRoundsCount(function (currentRound) {\n        return currentRound + 1;\n      });\n    } else {\n      minBoundary = currentGuess + 1;\n      onRoundsCount(function (currentRound) {\n        return currentRound + 1;\n      });\n    }\n    var newGuess = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newGuess);\n    setLogRounds(function (current) {\n      return [newGuess].concat(_toConsumableArray(current));\n    });\n  }\n  var guessRoundsListLength = logRounds.length;\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponent's Guess\"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        children: \"Higher or lower?\"\n      }), _jsxs(View, {\n        style: ButtonsStyles.buttonsContainer,\n        children: [_jsx(View, {\n          style: ButtonsStyles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, \"greater\"),\n            children: _jsx(Ionicons, {\n              name: \"md-add\",\n              size: 24,\n              color: \"#fff\"\n            })\n          })\n        }), _jsx(View, {\n          style: ButtonsStyles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, \"lower\"),\n            children: _jsx(Ionicons, {\n              name: \"md-remove\",\n              size: 24,\n              color: \"#fff\"\n            })\n          })\n        })]\n      })]\n    }), _jsx(View, {\n      style: styles.listContainer,\n      children: _jsx(FlatList, {\n        data: logRounds,\n        renderItem: function renderItem(itemData) {\n          return _jsx(GuessLogItem, {\n            roundNumber: guessRoundsListLength - itemData.index,\n            guess: itemData.item\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item;\n        }\n      })\n    })]\n  });\n}\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24\n  },\n  listContainer: {\n    flex: 1,\n    padding: 16\n  }\n});","map":{"version":3,"names":["useState","useEffect","StyleSheet","View","Alert","FlatList","Title","NumberContainer","PrimaryButton","Card","ButtonsStyles","InstructionText","GuessLogItem","Ionicons","jsx","_jsx","jsxs","_jsxs","generateRandomBetween","min","max","exclude","rndNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","_ref","userNumber","onGameOver","onRoundsCount","initalGuess","_useState","_useState2","_slicedToArray","currentGuess","setCurrentGuess","_useState3","_useState4","logRounds","setLogRounds","nextGuessHandler","direction","alert","text","style","currentRound","newGuess","current","concat","_toConsumableArray","guessRoundsListLength","length","styles","screen","children","buttonsContainer","buttonContainer","onPress","bind","name","size","color","listContainer","data","renderItem","itemData","roundNumber","index","guess","item","keyExtractor","create","flex","padding"],"sources":["C:/Users/ABDALRHMAN/Documents/GitHub/guess-my-number/screens/GameScreen.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { StyleSheet, View, Alert, FlatList } from \"react-native\";\r\n\r\nimport Title from \"../components/ui/Title\";\r\nimport NumberContainer from \"../components/game/NumberContainer\";\r\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\r\nimport Card from \"../components/ui/Card\";\r\nimport ButtonsStyles from \"../constants/ButtonsStyles\";\r\nimport InstructionText from \"../components/ui/InstructionText\";\r\nimport GuessLogItem from \"../components/game/GuessLogItem\";\r\n\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\n\r\nfunction generateRandomBetween(min, max, exclude) {\r\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  if (rndNum === exclude) {\r\n    return generateRandomBetween(min, max, exclude);\r\n  } else {\r\n    return rndNum;\r\n  }\r\n}\r\n\r\nlet minBoundary = 1;\r\nlet maxBoundary = 100;\r\n\r\nfunction GameScreen({ userNumber, onGameOver, onRoundsCount }) {\r\n  const initalGuess = generateRandomBetween(1, 100, userNumber);\r\n\r\n  const [currentGuess, setCurrentGuess] = useState(initalGuess);\r\n  const [logRounds, setLogRounds] = useState([initalGuess]);\r\n\r\n  useEffect(() => {\r\n    if (currentGuess === userNumber) {\r\n      onGameOver();\r\n    }\r\n  }, [currentGuess, userNumber, onGameOver]);\r\n\r\n  useEffect(() => {\r\n    minBoundary = 1;\r\n    maxBoundary = 100;\r\n  }, []);\r\n\r\n  function nextGuessHandler(direction) {\r\n    if (\r\n      (direction === \"lower\" && currentGuess < userNumber) ||\r\n      (direction === \"greater\" && currentGuess > userNumber)\r\n    ) {\r\n      Alert.alert(`Don't lie!`, `You know that this is wrong`, [\r\n        {\r\n          text: \"SORRY!\",\r\n          style: \"cancel\",\r\n        },\r\n      ]);\r\n\r\n      return;\r\n    }\r\n\r\n    if (direction === \"lower\") {\r\n      maxBoundary = currentGuess;\r\n      onRoundsCount((currentRound) => currentRound + 1);\r\n    } else {\r\n      minBoundary = currentGuess + 1;\r\n      onRoundsCount((currentRound) => currentRound + 1);\r\n    }\r\n\r\n    const newGuess = generateRandomBetween(\r\n      minBoundary,\r\n      maxBoundary,\r\n      currentGuess\r\n    );\r\n\r\n    setCurrentGuess(newGuess);\r\n    setLogRounds((current) => [newGuess, ...current]);\r\n  }\r\n\r\n  const guessRoundsListLength = logRounds.length;\r\n\r\n  return (\r\n    <View style={styles.screen}>\r\n      <Title>Opponent's Guess</Title>\r\n      <NumberContainer>{currentGuess}</NumberContainer>\r\n      <Card>\r\n        <InstructionText>Higher or lower?</InstructionText>\r\n        <View style={ButtonsStyles.buttonsContainer}>\r\n          <View style={ButtonsStyles.buttonContainer}>\r\n            <PrimaryButton onPress={nextGuessHandler.bind(this, \"greater\")}>\r\n              <Ionicons name=\"md-add\" size={24} color=\"#fff\" />\r\n            </PrimaryButton>\r\n          </View>\r\n          <View style={ButtonsStyles.buttonContainer}>\r\n            <PrimaryButton onPress={nextGuessHandler.bind(this, \"lower\")}>\r\n              <Ionicons name=\"md-remove\" size={24} color=\"#fff\" />\r\n            </PrimaryButton>\r\n          </View>\r\n        </View>\r\n      </Card>\r\n      <View style={styles.listContainer}>\r\n        {/* {logRounds.map((i) => (\r\n          <View key={Math.random()}>\r\n            <Text>{i}</Text>\r\n          </View>\r\n        ))} */}\r\n        <FlatList\r\n          data={logRounds}\r\n          renderItem={(itemData) => (\r\n            <GuessLogItem\r\n              roundNumber={guessRoundsListLength - itemData.index}\r\n              guess={itemData.item}\r\n            />\r\n          )}\r\n          keyExtractor={(item) => item}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default GameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    flex: 1,\r\n    padding: 24,\r\n  },\r\n  listContainer: {\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}