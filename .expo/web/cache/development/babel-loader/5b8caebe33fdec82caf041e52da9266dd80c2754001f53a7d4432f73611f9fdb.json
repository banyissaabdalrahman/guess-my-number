{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Colors from \"../constants/Colors\";\nimport Title from \"../components/ui/Title\";\nimport Card from \"../components/ui/Card\";\nimport ButtonsStyles from \"../constants/ButtonsStyles\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction StartGameScreen(_ref) {\n  var onPickNumber = _ref.onPickNumber;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredNumber = _useState2[0],\n    setEnteredNumber = _useState2[1];\n  function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  }\n  function resetInputHandler() {\n    setEnteredNumber(\"\");\n  }\n  function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredNumber);\n    if (enteredNumber.length === 0) {\n      Alert.alert(\"Invalid input\", \"Empty input is rejected!\", [{\n        text: \"okay\",\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\"Invalid number\", \"Number has to be a number between 1 and 99\", [{\n        text: \"okay\",\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n    onPickNumber(chosenNumber);\n  }\n  return _jsxs(View, {\n    style: styles.rootContainer,\n    children: [_jsx(Title, {\n      children: \"Guess My Number\"\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        children: \"Enter a number\"\n      }), _jsx(TextInput, {\n        onChangeText: numberInputHandler,\n        style: styles.numberInput,\n        maxLength: 2,\n        keyboardType: \"number-pad\",\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        value: enteredNumber\n      }), _jsxs(View, {\n        style: ButtonsStyles.buttonsContainer,\n        children: [_jsx(View, {\n          style: ButtonsStyles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: confirmInputHandler,\n            children: \"Confirm\"\n          })\n        }), _jsx(View, {\n          style: ButtonsStyles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: resetInputHandler,\n            children: \"Reset\"\n          })\n        })]\n      })]\n    })]\n  });\n}\nexport default StartGameScreen;\nvar styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n    marginTop: 100,\n    alignItems: \"center\"\n  },\n  numberInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: Colors.accent500,\n    borderBottomWidth: 2,\n    color: Colors.accent500,\n    marginVertical: 8,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"names":["useState","StyleSheet","View","TextInput","Alert","PrimaryButton","Colors","Title","Card","ButtonsStyles","InstructionText","jsx","_jsx","jsxs","_jsxs","StartGameScreen","_ref","onPickNumber","_useState","_useState2","_slicedToArray","enteredNumber","setEnteredNumber","numberInputHandler","enteredText","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","length","alert","text","onPress","isNaN","style","styles","rootContainer","children","onChangeText","numberInput","maxLength","keyboardType","autoCapitalize","autoCorrect","value","buttonsContainer","buttonContainer","create","flex","marginTop","alignItems","height","width","fontSize","borderBottomColor","accent500","borderBottomWidth","color","marginVertical","fontWeight","textAlign"],"sources":["C:/Users/ABDALRHMAN/Documents/GitHub/guess-my-number/screens/StartGameScreen.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { StyleSheet, View, TextInput, Alert } from \"react-native\";\r\n\r\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\r\nimport Colors from \"../constants/Colors\";\r\nimport Title from \"../components/ui/Title\";\r\nimport Card from \"../components/ui/Card\";\r\nimport ButtonsStyles from \"../constants/ButtonsStyles\";\r\nimport InstructionText from \"../components/ui/InstructionText\";\r\n\r\nfunction StartGameScreen({ onPickNumber }) {\r\n  const [enteredNumber, setEnteredNumber] = useState(\"\");\r\n\r\n  function numberInputHandler(enteredText) {\r\n    setEnteredNumber(enteredText);\r\n  }\r\n\r\n  function resetInputHandler() {\r\n    setEnteredNumber(\"\");\r\n  }\r\n\r\n  function confirmInputHandler() {\r\n    const chosenNumber = parseInt(enteredNumber);\r\n\r\n    if (enteredNumber.length === 0) {\r\n      Alert.alert(\"Invalid input\", \"Empty input is rejected!\", [\r\n        { text: \"okay\", onPress: resetInputHandler },\r\n      ]);\r\n      return;\r\n    }\r\n\r\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\r\n      Alert.alert(\r\n        \"Invalid number\",\r\n        \"Number has to be a number between 1 and 99\",\r\n        [{ text: \"okay\", onPress: resetInputHandler }]\r\n      );\r\n      return;\r\n    }\r\n    onPickNumber(chosenNumber);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.rootContainer}>\r\n      <Title>Guess My Number</Title>\r\n      <Card>\r\n        <InstructionText>Enter a number</InstructionText>\r\n        <TextInput\r\n          onChangeText={numberInputHandler}\r\n          style={styles.numberInput}\r\n          maxLength={2}\r\n          keyboardType=\"number-pad\"\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n          value={enteredNumber}\r\n        />\r\n        <View style={ButtonsStyles.buttonsContainer}>\r\n          <View style={ButtonsStyles.buttonContainer}>\r\n            <PrimaryButton onPress={confirmInputHandler}>Confirm</PrimaryButton>\r\n          </View>\r\n          <View style={ButtonsStyles.buttonContainer}>\r\n            <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>\r\n          </View>\r\n        </View>\r\n      </Card>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default StartGameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  rootContainer: {\r\n    flex: 1,\r\n    marginTop: 100,\r\n    alignItems: \"center\",\r\n  },\r\n  numberInput: {\r\n    height: 50,\r\n    width: 50,\r\n    fontSize: 32,\r\n    borderBottomColor: Colors.accent500,\r\n    borderBottomWidth: 2,\r\n    color: Colors.accent500,\r\n    marginVertical: 8,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}