{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport GameScreen from \"./screens/GameScreen\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport Colors from \"./constants/Colors\";\nimport { useFonts } from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    userNumber = _useState2[0],\n    setUserNumber = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    gameIsOver = _useState4[0],\n    setGameIsOver = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    numberofRounds = _useState6[0],\n    setNumberOfRounds = _useState6[1];\n  var _useFonts = useFonts({\n      \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n      \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  function pickedNumberHandler(pickedNumber) {\n    setUserNumber(pickedNumber);\n    setGameIsOver(false);\n  }\n  function gameOverHandler() {\n    setGameIsOver(true);\n  }\n  function startNewGameHandler() {\n    setUserNumber(null);\n    setNumberOfRounds(0);\n  }\n  var screen = _jsx(StartGameScreen, {\n    onPickNumber: pickedNumberHandler\n  });\n  if (userNumber) {\n    screen = _jsx(GameScreen, {\n      userNumber: userNumber,\n      onGameOver: gameOverHandler,\n      onRoundsCount: setNumberOfRounds\n    });\n  }\n  if (gameIsOver && userNumber) {\n    screen = _jsx(GameOverScreen, {\n      rounds: numberofRounds,\n      number: userNumber,\n      onStartNewGame: startNewGameHandler\n    });\n  }\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  }\n  return _jsx(LinearGradient, {\n    colors: [Colors.primary700, Colors.accent500],\n    style: styles.rootScreen,\n    children: _jsx(ImageBackground, {\n      source: require(\"./assets/images/background.png\"),\n      resizeMode: \"cover\",\n      style: styles.rootScreen,\n      imageStyle: styles.imageBackground,\n      children: _jsx(SafeAreaView, {\n        style: styles.rootScreen,\n        children: screen\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  rootScreen: {\n    flex: 1\n  },\n  imageBackground: {\n    opacity: 0.15\n  }\n});","map":{"version":3,"names":["useState","StyleSheet","ImageBackground","SafeAreaView","LinearGradient","StartGameScreen","GameScreen","GameOverScreen","Colors","useFonts","AppLoading","jsx","_jsx","App","_useState","_useState2","_slicedToArray","userNumber","setUserNumber","_useState3","_useState4","gameIsOver","setGameIsOver","_useState5","_useState6","numberofRounds","setNumberOfRounds","_useFonts","require","_useFonts2","fontsLoaded","pickedNumberHandler","pickedNumber","gameOverHandler","startNewGameHandler","screen","onPickNumber","onGameOver","onRoundsCount","rounds","number","onStartNewGame","colors","primary700","accent500","style","styles","rootScreen","children","source","resizeMode","imageStyle","imageBackground","create","flex","opacity"],"sources":["C:/Users/ABDALRHMAN/Documents/GitHub/guess-my-number/App.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { StyleSheet, ImageBackground, SafeAreaView } from \"react-native\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport StartGameScreen from \"./screens/StartGameScreen\";\r\nimport GameScreen from \"./screens/GameScreen\";\r\nimport GameOverScreen from \"./screens/GameOverScreen\";\r\n\r\nimport Colors from \"./constants/Colors\";\r\n\r\nimport { useFonts } from \"expo-font\";\r\nimport AppLoading from \"expo-app-loading\";\r\n\r\nexport default function App() {\r\n  const [userNumber, setUserNumber] = useState();\r\n  const [gameIsOver, setGameIsOver] = useState(true);\r\n  const [numberofRounds, setNumberOfRounds] = useState(0);\r\n\r\n  const [fontsLoaded] = useFonts({\r\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\r\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\r\n  });\r\n\r\n  function pickedNumberHandler(pickedNumber) {\r\n    setUserNumber(pickedNumber);\r\n    setGameIsOver(false);\r\n  }\r\n\r\n  function gameOverHandler() {\r\n    setGameIsOver(true);\r\n  }\r\n\r\n  function startNewGameHandler() {\r\n    setUserNumber(null);\r\n    setNumberOfRounds(0);\r\n  }\r\n\r\n  let screen = <StartGameScreen onPickNumber={pickedNumberHandler} />;\r\n\r\n  if (userNumber) {\r\n    screen = (\r\n      <GameScreen\r\n        userNumber={userNumber}\r\n        onGameOver={gameOverHandler}\r\n        onRoundsCount={setNumberOfRounds}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (gameIsOver && userNumber) {\r\n    screen = (\r\n      <GameOverScreen\r\n        rounds={numberofRounds}\r\n        number={userNumber}\r\n        onStartNewGame={startNewGameHandler}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (!fontsLoaded) {\r\n    return <AppLoading />;\r\n  }\r\n\r\n  return (\r\n    <LinearGradient\r\n      colors={[Colors.primary700, Colors.accent500]}\r\n      style={styles.rootScreen}\r\n    >\r\n      <ImageBackground\r\n        source={require(\"./assets/images/background.png\")}\r\n        resizeMode=\"cover\"\r\n        style={styles.rootScreen}\r\n        imageStyle={styles.imageBackground}\r\n      >\r\n        <SafeAreaView style={styles.rootScreen}>{screen}</SafeAreaView>\r\n      </ImageBackground>\r\n    </LinearGradient>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  rootScreen: {\r\n    flex: 1,\r\n  },\r\n  imageBackground: {\r\n    opacity: 0.15,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}